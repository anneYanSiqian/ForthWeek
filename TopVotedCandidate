/**
 * @param {number[]} persons
 * @param {number[]} times
 */
var TopVotedCandidate = function(persons, times) {
    this.times = times;
    this.leads = [];
    let counts = {};
    let lead = -1;
    for (let person of persons) {
        counts[person] = (counts[person] || 0) + 1;
        if (counts[person] >= (counts[lead] || 0)) lead = person;
        this.leads.push(lead);
    }
};

/** 
 * @param {number} t
 * @return {number}
 */
TopVotedCandidate.prototype.q = function(t) {
    index = binarySearch(t, this.times);
    return this.leads[index];
};

function binarySearch(target, times) {
    let left = -1;
    let right = times.length - 1;
    while (left < right) {
        const mid = Math.floor((left + right + 1) / 2);
        if (times[mid] <= target) left = mid;
        else right = mid - 1;
    }
    return right;
}

/**
 * Your TopVotedCandidate object will be instantiated and called as such:
 * var obj = new TopVotedCandidate(persons, times)
 * var param_1 = obj.q(t)
 */
